// Generated by LiveScript 1.3.1
var fs, path, cli, colors, convert, glob, count, total, files, replace$ = ''.replace;
fs = require('fs');
path = require('path');
cli = require('cli');
colors = require('colors');
convert = require('./convert');
glob = require('glob');
cli = cli.enable('glob');
cli.parse({
  skipRuntime: ['s', 'Don\'t include the `runtime.js` on the HTML files'],
  json: ['j', 'Save the converted SWF files as JSON only.'],
  reporter: [false, 'Changes how information will be printed to stdout.', 'string', 'pretty']
});
count = 0;
total = 0;
files = [];
cli.main(function(args, options){
  var i$, len$, p, to$, results$ = [];
  options.reporter = options.reporter.toLowerCase();
  for (i$ = 0, len$ = args.length; i$ < len$; ++i$) {
    p = args[i$];
    files = files.concat(glob.sync(p));
  }
  total = files.length;
  if (options.reporter !== 'json') {
    console.log('');
  }
  for (i$ = 0, to$ = Math.min(files.length, 10); i$ < to$; ++i$) {
    results$.push(convertFile(options));
  }
  return results$;
});
function convertFile(options){
  var file, output;
  file = files.shift();
  output = file + '.' + (options.json ? 'json' : 'html');
  return convert(file, function(err, obj){
    var ref$, html, json, i$, len$, msg;
    if (err) {
      if (options.reporter === 'json') {
        console.log(JSON.stringify({
          status: 'error',
          source: file,
          error: err
        }));
      } else {
        console.error("Error converting " + file + ":");
        console.error(err + '\n');
      }
      return;
    }
    ref$ = obj.output, html = ref$.html, json = ref$.json;
    if (options.skipRuntime) {
      html = replace$.call(html, /<script.+runtime\.js.+<\/script>/, '');
    }
    fs.writeFileSync(output, options.json ? json : html);
    if (options.reporter === 'json') {
      console.log(JSON.stringify({
        status: 'success',
        source: file,
        output: output,
        messages: obj.messages
      }));
    } else {
      console.log(("[" + (++count) + " of " + total + "] ").green + path.relative(process.cwd(), output));
      if (obj.messages) {
        for (i$ = 0, len$ = (ref$ = obj.messages).length; i$ < len$; ++i$) {
          msg = ref$[i$];
          console.log(("[ " + msg.type + " ] ").yellow + msg.description);
        }
        console.log('');
      }
    }
    if (files.length) {
      return convertFile(options);
    }
  });
}