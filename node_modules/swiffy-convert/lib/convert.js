// Generated by LiveScript 1.3.1
var fs, request, zlib, stream;
fs = require('fs');
request = require('request');
zlib = require('zlib');
stream = require('stream');
function streamToBuffer(stream, callback){
  var bufs;
  bufs = [];
  stream.on('data', function(it){
    return bufs.push(it);
  });
  stream.on('error', function(it){
    return callback(it);
  });
  return stream.on('end', function(){
    return callback(null, Buffer.concat(bufs));
  });
}
module.exports = (function(){
  function convert(file, callback){
    var input, this$ = this;
    if (file instanceof stream.Stream) {
      streamToBuffer(file, function(err, buf){
        if (err) {
          return typeof callback == 'function' ? callback(err) : void 8;
        }
        return convert(buf, callback);
      });
      return;
    }
    input = function(it){
      return it.replace(/\+/g, '-');
    }(
    function(it){
      return it.replace(/\//g, '_');
    }(
    function(it){
      return it.toString('base64');
    }(
    typeof file === 'string' ? fs.readFileSync(file) : file)));
    request.post({
      url: 'https://www.googleapis.com/rpc?key=AIzaSyCC_WIu0oVvLtQGzv4-g7oaWNoc-u8JpEI',
      headers: {
        Host: 'www.googleapis.com',
        'Cache-Control': 'no-cache'
      },
      json: {
        apiVersion: 'v1',
        method: 'swiffy.convertToHtml',
        params: {
          client: 'Swiffy Flash Extension for Mac v1.1.1',
          input: input
        }
      }
    }, function(err, res, body){
      var statusCode, statusMessage, ref$, zip;
      statusCode = res.statusCode, statusMessage = res.statusMessage;
      if (err) {
        return typeof callback == 'function' ? callback(err) : void 8;
      }
      if (statusCode >= 400) {
        return typeof callback == 'function' ? callback("[ " + statusCode + " ] " + statusMessage) : void 8;
      }
      if (body.error != null) {
        return typeof callback == 'function' ? callback(body.error.message) : void 8;
      }
      if (!((ref$ = body.result.response.output) != null && ref$.length)) {
        return typeof callback == 'function' ? callback(body.result.response.status) : void 8;
      }
      zip = function(it){
        return new Buffer(it, 'base64');
      }(
      body.result.response.output);
      return zlib.gunzip(zip, function(err, html){
        var json, ref$;
        html = html.toString();
        json = function(it){
          return it[1];
        }(/swiffyobject\s*=\s*({.*});\s*<\/script>/.exec(html));
        return typeof callback == 'function' ? callback(null, (ref$ = body.result.response, ref$.output = {
          html: html,
          json: json
        }, ref$)) : void 8;
      });
    });
  }
  return convert;
}());